// RFQuack is a versatile RF-hacking tool that allows you to sniff, analyze, and
// transmit data over the air. Consider it as the modular version of the great
// 
// Copyright (C) 2019 Trend Micro Incorporated
// 
// This program is free software; you can redistribute it and/or modify it under
// the terms of the GNU General Public License as published by the Free Software
// Foundation; either version 2 of the License, or (at your option) any later
// version.
// 
// This program is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
// PARTICULAR PURPOSE.  See the GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License along with
// this program; if not, write to the Free Software Foundation, Inc., 51 Franklin
// Street, Fifth Floor, Boston, MA  02110-1301, USA.

syntax = "proto2";
package rfquack;

enum Mode {
    // RX means that whatever packet (matching the preamble and sync word (if
    // any) will be sent to the clients that are subscribed to the `rx_packet`
    // topic.
    RX = 0;

    // TX means that whatever packet a client sends via the `tx_packet` topic
    // will be transmitted.
    TX = 1;

    // Put the radio in idle mode (if the driver permits this)
    IDLE = 2;

    // Put the radio in jamming mode (hope you know what you are doing)
    JAM = 3;
}

enum WhichRadio {
    // Which of the Radios is selected
    RadioA = 0;
    RadioB = 1;
    RadioC = 2;
    RadioD = 3;
    RadioE = 4;
}

enum Modulation {
    // Which modulation to use (if supported)
    FSK2 = 0;
    OOK = 1;
    FSK4 = 2;
    GFSK2 = 3;
    GFSK4 = 4;
    MSK = 5;
}

message PacketLen {
    required bool isFixedPacketLen = 9;
    required uint32 packetLen = 10;
}

// Modem configuration
message ModemConfig {
    optional float carrierFreq = 1;
    optional int32 txPower = 2;
    optional uint32 preambleLen = 3;
    optional bytes syncWords = 4;
    optional bool isPromiscuous = 5;
    optional Modulation modulation = 7;
    optional bool useCRC = 8;
    optional float bitRate = 9;
    optional float rxBandwidth = 10;
    optional float frequencyDeviation = 11;
}

// This is either a RX or TX packet
message Packet {
    required bytes data = 1;
    optional WhichRadio rxRadio = 2;
    optional uint64 millis = 3;
    optional uint32 repeat = 4;
    optional float bitRate = 5;
    optional float carrierFreq = 6;
    optional bytes syncWords = 7;
    optional string modulation = 8;
    optional float frequencyDeviation = 9;
    optional float RSSI = 10;
    optional string model = 11;
}

// Get or set a given register to the value
message Register {
    required uint32 address = 1;
    optional uint32 value = 2;
}

// Base types
message UintValue {
    required uint32 value = 1;
}
message IntValue {
    required int32 value = 1;
}
message BoolValue {
    required bool value = 1;
}
message FloatValue {
    required float value = 1;
}
message BytesValue {
    required bytes value = 1;
}
message WhichRadioValue {
    required WhichRadio value = 1;
}
message VoidValue {
}

// Reply to a command sent to a module.
message CmdReply {
    required int32 result = 1;
    optional string message = 2;
}

// Information about a module command.
message CmdInfo {
    // Every command accepts an argument:
    // Example:  q.driver.frequency = 433.2:    The argument is a FloatValue
    // Example:  q.roll_jam.start():            The argument is a VoidValue
    // Example:  q.roll_jam.repeat(5):          The argument is a UintValue
    required string argumentType = 1; // Example: rfquack_BoolValue
    enum CmdTypeEnum {
        ATTRIBUTE = 1; // Example: q.driver.frequency = 433.2
        METHOD = 2; // Example: q.roll_jam.start()
    }
    required CmdTypeEnum cmdType = 2;
    required string description = 3; // English description.
}

// A packet-modification rule: here you can tell the tool how to modify a given
// byte of the packet, and re-transmit it when in attack mode. For example you
// could XOR byte four with a given operand, and re-transmit the packet so
// obtained.
//
// Note that a packet manipulation can be used as a simple filter. Just set
// a pattern and nothing else.
message PacketModification {
    optional uint32 position = 1; // position in the packet <- this takes priority over the content
    optional uint32 content = 2; // position = all indexOf(content)

    enum Op {
        AND = 1; // packet[position] = packet[position] & operand
        OR = 2; // packet[position] = packet[position] | operand
        XOR = 3; // packet[position] = packet[position] ^ operand
        NOT = 4; // packet[position] = ~packet[position]
        SLEFT = 5; // packet[position] = packet[position] << operand
        SRIGHT = 6; // packet[position] = packet[position] >> operand
        PREPEND = 7; // packet = payload + packet
        APPEND = 8; // packet = packet + payload
        INSERT = 9; // packet = packet[0 : position] + payload + packet[position : packet.size]
    }

    optional Op operation = 3;
    optional uint32 operand = 4;

    // Apply modifications only to packets matching a given pattern
    optional string pattern = 5;

    // Bytes to append / prepend while choosen OP is PREPEND / APPEND
    optional bytes payload = 6;
}

// Packet filter based on regex pattern
message PacketFilter {
    required string pattern = 1;
    required bool negateRule = 2;
}
